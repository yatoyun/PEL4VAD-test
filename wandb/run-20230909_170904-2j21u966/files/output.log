
8000 8100 2900
[2023-09-09 17:09:06,096][main.py][line:165][INFO] total params:30.6445M
[2023-09-09 17:09:06,096][main.py][line:168][INFO] Training Mode
[2023-09-09 17:09:06,097][main.py][line:78][INFO] Model:XModel(
  (self_attention): XEncoder(
    (self_attn): TCA(
      (q): Linear(in_features=1024, out_features=128, bias=True)
      (k): Linear(in_features=1024, out_features=128, bias=True)
      (v): Linear(in_features=1024, out_features=128, bias=True)
      (o): Linear(in_features=128, out_features=1024, bias=True)
      (act): Softmax(dim=-1)
    )
    (linear1): Conv1d(1024, 512, kernel_size=(1,), stride=(1,))
    (linear2): Conv1d(512, 300, kernel_size=(1,), stride=(1,))
    (dropout1): Dropout(p=0.5, inplace=False)
    (dropout2): Dropout(p=0.5, inplace=False)
    (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (loc_adj): DistanceAdj()
    (DR_DMU): WSAD(
      (embedding): Temporal(
        (conv_1): Sequential(
          (0): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): ReLU()
        )
      )
      (triplet): TripletMarginLoss()
      (Amemory): Memory_Unit(
        (sig): Sigmoid()
      )
      (Nmemory): Memory_Unit(
        (sig): Sigmoid()
      )
      (selfatt): Transformer(
        (layers): ModuleList(
          (0-1): 2 x ModuleList(
            (0): PreNorm(
              (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (fn): Attention(
                (attend): Softmax(dim=-1)
                (to_qkv): Linear(in_features=512, out_features=2048, bias=False)
                (to_out): Sequential(
                  (0): Linear(in_features=1024, out_features=512, bias=True)
                  (1): Dropout(p=0.5, inplace=False)
                )
              )
            )
            (1): PreNorm(
              (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (fn): FeedForward(
                (net): Sequential(
                  (0): Linear(in_features=512, out_features=512, bias=True)
                  (1): GELU(approximate='none')
                  (2): Dropout(p=0.5, inplace=False)
                  (3): Linear(in_features=512, out_features=512, bias=True)
                  (4): Dropout(p=0.5, inplace=False)
                )
              )
            )
          )
        )
      )
      (encoder_mu): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
      )
      (encoder_var): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
      )
      (relu): ReLU()
      (embedding2): Temporal(
        (conv_1): Sequential(
          (0): Conv1d(2048, 1024, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): ReLU()
        )
      )
      (selfatt2): Transformer(
        (layers): ModuleList(
          (0-1): 2 x ModuleList(
            (0): PreNorm(
              (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
              (fn): Attention(
                (attend): Softmax(dim=-1)
                (to_qkv): Linear(in_features=1024, out_features=4096, bias=False)
                (to_out): Sequential(
                  (0): Linear(in_features=2048, out_features=1024, bias=True)
                  (1): Dropout(p=0.5, inplace=False)
                )
              )
            )
            (1): PreNorm(
              (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
              (fn): FeedForward(
                (net): Sequential(
                  (0): Linear(in_features=1024, out_features=1024, bias=True)
                  (1): GELU(approximate='none')
                  (2): Dropout(p=0.5, inplace=False)
                  (3): Linear(in_features=1024, out_features=1024, bias=True)
                  (4): Dropout(p=0.5, inplace=False)
                )
              )
            )
          )
        )
      )
    )
  )
  (classifier): Conv1d(300, 1, kernel_size=(9,), stride=(1,))
  (dropout): Dropout(p=0.5, inplace=False)
)
[2023-09-09 17:09:06,097][main.py][line:79][INFO] Optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    initial_lr: 0.0001
    lr: 0.0001
    maximize: False
    weight_decay: 5e-05
)
[2023-09-09 17:09:17,336][main.py][line:82][INFO] Random initialize AUCAUC:0.5208 Anomaly AUC:0.48912
[2023-09-09 17:09:50,548][main.py][line:106][INFO] [Epoch:1/100]: lr:0.00010 | loss1:1.2571 loss2:1.3597 loss3:0.3718 | AUC:0.7949 Anomaly AUC:0.5865
[2023-09-09 17:10:23,516][main.py][line:106][INFO] [Epoch:2/100]: lr:0.00010 | loss1:0.6183 loss2:1.0950 loss3:0.2415 | AUC:0.8044 Anomaly AUC:0.5840
[2023-09-09 17:10:56,712][main.py][line:106][INFO] [Epoch:3/100]: lr:0.00010 | loss1:0.4489 loss2:0.9578 loss3:0.1742 | AUC:0.8117 Anomaly AUC:0.5849
[2023-09-09 17:11:29,854][main.py][line:106][INFO] [Epoch:4/100]: lr:0.00010 | loss1:0.3187 loss2:0.8964 loss3:0.1498 | AUC:0.8019 Anomaly AUC:0.5779
[2023-09-09 17:12:03,261][main.py][line:106][INFO] [Epoch:5/100]: lr:0.00010 | loss1:0.2525 loss2:0.8591 loss3:0.1404 | AUC:0.8202 Anomaly AUC:0.5675
[2023-09-09 17:12:36,659][main.py][line:106][INFO] [Epoch:6/100]: lr:0.00010 | loss1:0.1710 loss2:0.8214 loss3:0.1294 | AUC:0.8137 Anomaly AUC:0.5629
[2023-09-09 17:13:10,214][main.py][line:106][INFO] [Epoch:7/100]: lr:0.00010 | loss1:0.1213 loss2:0.7863 loss3:0.1211 | AUC:0.7993 Anomaly AUC:0.5527
[2023-09-09 17:13:43,695][main.py][line:106][INFO] [Epoch:8/100]: lr:0.00010 | loss1:0.0755 loss2:0.7528 loss3:0.1126 | AUC:0.8105 Anomaly AUC:0.5585
[2023-09-09 17:14:17,207][main.py][line:106][INFO] [Epoch:9/100]: lr:0.00010 | loss1:0.0771 loss2:0.7327 loss3:0.1106 | AUC:0.8029 Anomaly AUC:0.5779
[2023-09-09 17:14:50,815][main.py][line:106][INFO] [Epoch:10/100]: lr:0.00010 | loss1:0.0656 loss2:0.7088 loss3:0.1040 | AUC:0.7986 Anomaly AUC:0.5581
Traceback (most recent call last):
  File "/home/yukaneko/dev/AbnormalDetection/PEL4VAD/main.py", line 203, in <module>
    main(cfg)
  File "/home/yukaneko/dev/AbnormalDetection/PEL4VAD/main.py", line 170, in main
    train(model, train_nloader, train_aloader, test_loader, gt, logger)
  File "/home/yukaneko/dev/AbnormalDetection/PEL4VAD/main.py", line 90, in train
    loss1, loss2, cost = train_func(train_nloader, train_aloader, model, optimizer, criterion, criterion2, criterion3, logger_wandb, args.lamda, args.alpha)
  File "/home/yukaneko/dev/AbnormalDetection/PEL4VAD/train.py", line 25, in train_func
    v_input = v_input.float().cuda(non_blocking=True)
KeyboardInterrupt